Alright, here’s how to **wire this logic into your MQL5 bot in a real, dynamic way**—using all the principles we’ve discussed, and making it fully modular for scenario-chain bias flips, confirmation, and zone management.

---

## **1. Market Structure & Scenario Detection (Core Loop)**

You already have `MarketStructureInfo msEntry = AnalyzeMarketStructure(symbol, tf);`

After every tick or on a schedule, run:

```mql
// 1. Build detected patterns
BuildDetectedPatterns(msEntry, detectedPatterns, detectedCount);

// 2. Find the best scenario (bullish/bearish) based on chain logic
int buyScenarioIndex  = FindBestScenario("bullish");
int sellScenarioIndex = FindBestScenario("bearish");

// 3. Confirm zone with confluence logic
ConfluenceResult conf = MasterConfluenceCheck(msEntry, zoneLow, zoneHigh, barShift, entry_tf, trend_tf, minNeeded);
```

---

## \*\*2. **Dynamic Bias Flip & Zone Creation**

This is the **core** of dynamic zone & bias logic:

```mql
// Flip bias and create zone only if ALL conditions are met
if (conf.isTier1 || conf.tier2Count >= minConfluence) {
    // Bullish scenario chain matched
    if (buyScenarioIndex != -1 && currentBias != "bullish") {
        ErasePreviousZones();
        DrawBuyZone(zoneLow, zoneHigh);
        currentBias = "bullish";
        Print("Bias flipped: BULLISH, New buy zone drawn!");
    }
    // Bearish scenario chain matched
    else if (sellScenarioIndex != -1 && currentBias != "bearish") {
        ErasePreviousZones();
        DrawSellZone(zoneLow, zoneHigh);
        currentBias = "bearish";
        Print("Bias flipped: BEARISH, New sell zone drawn!");
    }
    // Else, hold current zone and bias until new confirmation
}
else {
    // No valid scenario match yet: keep waiting, do nothing.
}
```

---

## **3. Entry Confirmation (Final Filter)**

**Don’t enter on first touch!**
After bias flip and new zone, require a final confirmation:

```mql
if (currentBias == "bullish" && IsBullishConfirmationCandle(symbol, tf, 1)) {
    OpenBuyTrade();
}
else if (currentBias == "bearish" && IsBearishConfirmationCandle(symbol, tf, 1)) {
    OpenSellTrade();
}
else {
    // Still waiting for confirmation candle in the zone
}
```

---

## **4. Automatically Adapt to Trend Shifts**

This keeps the bot **agile**:

* Each new zone erases the old, so chart is always clean.
* Zones only update when confirmation triggers a **real** bias flip.
* **If the scenario chain fails (e.g. false breakout), bot can flip back after new confluence appears.**

---

## **Diagram (Conceptual Flow)**

```plaintext
            |-> 1. Analyze Structure ----|
OnTick() -->|-> 2. Build Pattern Flags --|-> 3. Scenario Match? --YES-> 4. Wait for Confirmation Candle? --YES-> 5. Open Trade
            |                             |--NO--> Wait, do nothing
```

---

## **How to Integrate**

* Place this wiring **after** your `AnalyzeMarketStructure` and `BuildDetectedPatterns` calls.
* Use **one zone per bias** (don’t let both appear together).
* Use scenario chain logic and confluence checker to validate before flipping bias or drawing a new zone.
* Require a final confirmation candlestick/pattern before actually entering a trade.

---

## **EXTRA: Sample Confirmation Candlestick Logic**

You likely already have this, but here’s a compact example:

```mql
bool IsBullishConfirmationCandle(string symbol, ENUM_TIMEFRAMES tf, int shift) {
    double open = iOpen(symbol, tf, shift);
    double close = iClose(symbol, tf, shift);
    return (close > open) && ((close - open) > 0.5 * (iHigh(symbol, tf, shift) - iLow(symbol, tf, shift)));
}

bool IsBearishConfirmationCandle(string symbol, ENUM_TIMEFRAMES tf, int shift) {
    double open = iOpen(symbol, tf, shift);
    double close = iClose(symbol, tf, shift);
    return (close < open) && ((open - close) > 0.5 * (iHigh(symbol, tf, shift) - iLow(symbol, tf, shift)));
}
```

---

### **Want the full modular functions with all variables and context? Or do you want to see how to wire this into your existing OnTick block with all protections and edge cases?**


Let's **summarize how everything combines** and tie it all together in a single, clear, professional workflow—using all the upgrades, wiring, and logic we've mapped out from your original bot, the new scenario/confluence engine, and the most recent pseudo-code.

---

## **1. Live Market Scan and Pattern Detection**

* **Every tick** (or on a new candle), run **all structure detectors** on both the entry and higher timeframes:

  * `MarketStructureInfo msEntry = AnalyzeMarketStructure(_Symbol, entryTF);`
  * `MarketStructureInfo msHTF  = AnalyzeMarketStructure(_Symbol, HTF);`
* **Fill out** the `MarketStructureInfo` struct with all live findings:

  * Trend (bullish/bearish/sideways)
  * BOS, OB, FVG, sweep, flag, pennant, triple/double top/bottom, support/resistance, etc.

---

## **2. Build Scenario Patterns**

* Convert the detected structure into a pattern string array:

  * `BuildDetectedPatterns(msEntry, detectedPatterns, detectedCount);`
  * Now you have: `detectedPatterns[]` like `["BOS","orderblock","FVG",...]`

---

## **3. Run Scenario Chain Logic**

* **Register all scenarios** (buy, sell, advanced chains).
* **Find best matching scenario** for current bias:

  * `int bestScenario = FindBestScenario(botBias);`
* Also always scan for a *candidate* scenario on the **opposite** side (background flip readiness).

---

## **4. Dynamic Confluence Check**

* Run confluence check for current zone:

  * `ConfluenceResult conf = MasterConfluenceCheck(msEntry, zoneLow, zoneHigh, 0, entryTF, HTF, minConfluence);`
* This confirms if there's enough multi-factor evidence (Tier 1/Tier 2) to allow entry or flip.

---

## **5. Dynamic Bias Flip (Single Active Zone)**

* **Erase all previous zones:**

  * `CleanupBuyZones(); CleanupSellZones();`
* If a valid scenario is matched *and* confluence check passes:

  * Draw only **ONE** zone, depending on the bot's live bias (`bullish` or `bearish`).

    * `AddBuyZone("buy zone here", zoneLow, zoneHigh);`
    * or
    * `AddSellZone("sell zone here", zoneLow, zoneHigh);`
* If structure flips (BOS, sweep, scenario chain), the bias flips, old zone is erased, new one drawn.

---

## **6. Entry and Management Logic**

* Wait for **final confirmation** (candlestick, volume, wick, etc.) inside the zone.
* If confirmation is present **and** no trade is active:

  * Place the trade (buy/sell), set SL/TP dynamically based on zone and scenario config.
  * Log, manage trailing/breakeven, monitor for reversal.

---

## **7. Background Zone/Scenario Tracking**

* **Always** track candidate zones/scenarios for the *other* bias, ready to flip instantly.
* Only draw the candidate zone when scenario/confluence for that side is satisfied.

---

## **8. Chart Management**

* **Only ever one active zone on the chart.**
* Never flood with redundant rectangles.
* Zones update/flip instantly with structure and scenario.

---

## **How It All Works Together on Your Uploaded Charts:**

### **On the Daily/4H Uptrend:**

* Bot detects trend is up, only marks buy zone.
* Waits for price to test zone and scenario/confluence to trigger a buy.
* No sell zone drawn unless structure flips.

### **On the 1H After a BOS:**

* If price breaks support and a bearish scenario/confluence triggers:

  * Bot flips to bearish bias, draws only a sell zone.
  * Waits for confirmation before shorting.
* If price reclaims and triggers bullish scenario/confluence:

  * Flips back to buy zone.

---

## **TL;DR (How Everything Is Combined)**

* **Run all detectors every tick**
* **Build pattern/confluence scenario**
* **Flip bias and redraw zone only when scenario chain/confluence flips**
* **Always only one zone visible**
* **Wait for final confirmation before entry**
* **Track candidate zones in background—ready for instant flip**

---

**This is the professional “expansion” architecture:**

* Modular, scalable, no chart flooding, instant bias flips, dynamic scenario chains, and true adaptive market sync.

If you want **copy-paste code for the full main OnTick block** (using your function/struct names) or a visual flow chart, just say the word!


Great! Here’s a **complete, copy-paste-ready, professional main loop wiring** for your advanced bot—integrating everything (dynamic detection, scenario/confluence chains, bias flip, zone management, and confirmation logic) based on the exact structure you’ve built.

---

## **SAMUEWE o5-Max: Modular OnTick/Decision Engine**

```mql
// ===== Main Structs and Arrays (at the top of your EA) =====
string detectedPatterns[32];
int detectedCount = 0;
string currentBias = "neutral"; // "bullish" or "bearish"
double zoneLow = 0, zoneHigh = 0;

// Only one active zone at a time!
bool buyZoneActive = false;
bool sellZoneActive = false;

// ===== OnTick =====
void OnTick()
{
    // 1. Run dynamic pattern detection
    MarketStructureInfo msEntry = AnalyzeMarketStructure(_Symbol, entryTF);
    MarketStructureInfo msHTF   = AnalyzeMarketStructure(_Symbol, HTF);

    // 2. Convert structure findings into scenario flags
    BuildDetectedPatterns(msEntry, detectedPatterns, detectedCount);

    // 3. Run scenario chain for both sides
    int buyScenarioIdx  = FindBestScenario("bullish");
    int sellScenarioIdx = FindBestScenario("bearish");

    // 4. Master confluence check
    ConfluenceResult conf = MasterConfluenceCheck(msEntry, zoneLow, zoneHigh, 0, entryTF, HTF, minConfluence);

    // 5. Dynamic bias flip & zone creation (ONE zone only)
    if ((conf.isTier1 || conf.tier2Count >= minConfluence))
    {
        // ---- FLIP TO BUY ----
        if (buyScenarioIdx != -1 && currentBias != "bullish")
        {
            CleanupSellZones();
            CleanupBuyZones();
            zoneLow  = [determine zoneLow from scenario/OB/FVG];
            zoneHigh = [determine zoneHigh from scenario/OB/FVG];
            AddBuyZone("buy zone here", zoneLow, zoneHigh);
            buyZoneActive = true; sellZoneActive = false;
            currentBias = "bullish";
            Print("Bias flipped: BULLISH");
        }
        // ---- FLIP TO SELL ----
        else if (sellScenarioIdx != -1 && currentBias != "bearish")
        {
            CleanupBuyZones();
            CleanupSellZones();
            zoneLow  = [determine zoneLow from scenario/OB/FVG];
            zoneHigh = [determine zoneHigh from scenario/OB/FVG];
            AddSellZone("sell zone here", zoneLow, zoneHigh);
            sellZoneActive = true; buyZoneActive = false;
            currentBias = "bearish";
            Print("Bias flipped: BEARISH");
        }
    }

    // 6. Wait for final confirmation before entry (ONE per zone, no overlap)
    if (buyZoneActive && currentBias == "bullish" && PriceInZone(zoneLow, zoneHigh) && IsBullishConfirmationCandle(_Symbol, entryTF, 1))
    {
        if (!TradeIsOpen("buy")) // avoid duplicate entries
            OpenBuyTrade(zoneLow, zoneHigh);
    }
    else if (sellZoneActive && currentBias == "bearish" && PriceInZone(zoneLow, zoneHigh) && IsBearishConfirmationCandle(_Symbol, entryTF, 1))
    {
        if (!TradeIsOpen("sell"))
            OpenSellTrade(zoneLow, zoneHigh);
    }

    // 7. Background: Always ready for an instant flip if scenario/confluence changes
}

// ===== Helper Functions =====

bool PriceInZone(double low, double high)
{
    double price = SymbolInfoDouble(_Symbol, SYMBOL_BID);
    return (price >= low && price <= high);
}

bool TradeIsOpen(string type)
{
    // ... check if trade of type "buy"/"sell" is already open (your logic here)
    return false;
}

void CleanupBuyZones()
{
    // ... erase all buy zone rectangles/labels from chart
}

void CleanupSellZones()
{
    // ... erase all sell zone rectangles/labels from chart
}

void AddBuyZone(string label, double low, double high)
{
    // ... draw one buy zone (rectangle/label) on chart
}

void AddSellZone(string label, double low, double high)
{
    // ... draw one sell zone (rectangle/label) on chart
}

// Fill in zoneLow/zoneHigh logic as needed (from your OB/FVG/confluence/zone array)
// Use msEntry.obLow, msEntry.obHigh, msEntry.fvgLow, msEntry.fvgHigh, etc.

```

---

### **Key Notes:**

* Only ONE buy or sell zone on chart at a time, based on live bias.
* The bot flips bias dynamically with real scenario/confluence triggers.
* Trades are only triggered after confirmation inside the active zone.
* All supporting logic (pattern detection, confluence, scenario chains) is **fully modular and expandable**.
* “Background scenario” tracking ensures instant flip readiness.

---

**You can now wire in all your favorite patterns, confluences, and custom scenario chains.**

* For each upgrade, just add a new scenario to the chain or tweak your `BuildDetectedPatterns` logic.
* For zoneLow/zoneHigh, pull from the most relevant market structure: OB, FVG, sweep, support, etc.

---

**Let me know if you want a plug-and-play example with your exact function calls, or a more visual/diagram flow version for your docs!**



**Exactly!**
This new full template and scenario-chain engine is designed to make your bot **dynamically** target either a buy zone or a sell zone—never both at once, always based on who’s in control (bulls or bears), the *current* multi-timeframe bias, and whatever scenario logic is “lighting up” in the present context.

### **Here’s how it’s different (and why it’s “smart”):**

---

#### **1. Dynamic Zone Targeting**

* The bot checks all the advanced conditions (trend, SMC patterns, structure, order blocks, liquidity sweeps, etc.) **on every tick/bar**.
* It only marks a **buy zone here** or **sell zone here** if the scenario chain (your logic map) confirms enough confluence.
* There’s no hardcoded “always draw both zones”—the logic *decides* which side is currently in play.

---

#### **2. Bias Flip Handling**

* If buyers are in control (confirmed uptrend, liquidity sweep below, bullish scenario chain match), the bot flips to bullish and looks for new **buy zones** (and ignores sell zones).
* If sellers regain control (confirmed BOS down, stoprun above, bearish scenario chain), it flips to bearish and looks for **sell zones**—even if it was bullish a moment ago.
* This “flip” is **fully dynamic**—happens any time the scenario chain confirms a regime change.

---

#### **3. Waits for Confirmation**

* Even after marking a buy/sell zone, the bot does **not** enter right away.
* It waits for candlestick confirmations, volume spikes, engulfings, or whatever extra criteria you’ve defined in your *confluence engine*.
* You avoid getting trapped by fakeouts or “obvious” zones that don’t actually have follow-through.

---

#### **4. Scenario Chains = No Redundancy**

* The **scenario chain** acts as your flexible “if, then” machine: it can require as many or as few conditions as you want.
* You can wire up as many scenario types as needed (BOS+OB+FVG, or Double Bottom+Session+FVG, etc.).
* Each scenario is **fully modular**—no hardcoded logic. You can expand or update these without rewriting the main engine.

---

#### **5. Clean Chart, Not Cluttered**

* Only **one active side** is shown at a time, keeping your chart clean.
* Zones update in real-time as the bias changes, and old zones are cleared away.

---

### **TL;DR Summary**

> * **Yes, your bot will now act like a pro SMC trader:**
>
>   * Dynamically targeting zones.
>   * Flipping bias as market control shifts.
>   * Waiting for real confirmation before acting.
>   * Not cluttering your chart with “both sides.”
>   * Extensible to any confluence/scenario logic you want.

---

**You’ve moved from a “dumb hardcoded script” to an “adaptive, chain-driven, scenario-validated trading AI.”**

---

**Ready to wire up the final integration or want to see a concrete `OnTick` example?**




Great clarification!
When I say **“on every tick/bar”**, here’s what it really means for your bot—especially with your new dynamic scenario logic:

---

### **On Every Tick/Bar:**

* **The logic is checked continuously:**

  * **Every tick** means every time price updates (every new quote/tick that comes in—very fast, multiple per second).
  * **Every bar** means at the close or open of each new candle (for example, every new 1m, 5m, 1h, etc. candle, depending on your bot's chart timeframe).

---

### **How Does Zone Drawing Actually Work?**

* **The bot *evaluates* conditions every tick/bar** (so it’s always up-to-date).
* **BUT it only draws a new zone when all your scenario-chain conditions are met** and a *new opportunity* is detected.
* It does **NOT** draw a new zone on every single candle, or you’d get a mess!
* **If the zone is still valid (not broken, swept, or invalidated), the bot keeps the zone.**
* **If the bias flips, or price sweeps/touches the zone, or a new scenario is triggered, it deletes the old zone and draws a new one** (if and only if the scenario chain validates).

---

#### **In Practice:**

* Most of the time, the same zone stays on the chart until price action justifies a change.
* Zones are **not redrawn for every new bar**—only when the scenario logic detects a new opportunity.
* Your code logic should have checks like:

  * "Is the last zone still valid?"
  * "Did we just get a scenario match for a new buy/sell zone?"
  * "Has the bias flipped?"

---

**Summary:**

* **Logic is checked every tick/bar (so it’s always ready)**
* **Zones are *only* drawn/updated when a new valid opportunity appears or the bias/structure changes**
* **Result:** Clean, responsive, dynamic—*not* messy or over-drawn!

---

Let me know if you want a code flow chart or example function for this logic!


Absolutely, you can dynamically integrate the new zone and pattern/bias logic **without breaking your current advanced OnTick structure**. Here’s a breakdown of what you need to know and *exactly* how to do it, step by step, with explanations.

---

## **How Your Current OnTick Works**

* The bot currently runs **trend analysis**, **entry analysis**, and builds detected patterns with:

  * `msTrend` for higher timeframe trend (market context)
  * `msEntry` for entry timeframe (precise triggers)
* **Buy and sell zones** are identified and cleaned up per tick
* **Master confluence** and **scenario checks** validate trades (for both buy and sell side)
* Panel, risk, and position management logic update dynamically

---

## **How To Fully Integrate Dynamic Zone/Bias/Pattern Logic**

### 1. **Replace All Hardcoded Buy/Sell Zone Logic**

* All logic that calculates price1/price2 for “BUY\_ZONE” and “SELL\_ZONE” (based on static swing lookbacks, zone width %) should be replaced by **your new dynamic zone detector**.

* Use functions like:

  ```mql5
  ms.supportZone = DetectZone(symbol, tf, supportLookback, ZONE_SUPPORT, minTouches, tolerance);
  ms.resistanceZone = DetectZone(symbol, tf, resistanceLookback, ZONE_RESISTANCE, minTouches, tolerance);
  ```

  where `minTouches` and `tolerance` come from your Tolerance/RiskLevel logic.

* Instead of drawing a fixed "BUY\_ZONE" every tick, **only draw** if your dynamic zone detection returns true.
  E.g.

  ```mql5
  if (ms.supportZone) {
      DrawZone("BUY_ZONE", ms.supportLevel, ms.supportLevel + dynamicZoneWidth, ...);
      // And continue logic for confirmation/entry etc.
  }
  ```

### 2. **Dynamic Bias/Trend Flip**

* You already have all necessary conditions to **flip bias** automatically:

  * If price sweeps the current buy zone and a sell-side pattern is detected, the bot flips to "look for sells" (bearish bias).
  * This is handled via:

    ```mql5
    if (msTrend.trendDirection == TREND_BULLISH) { ... } 
    else if (msTrend.trendDirection == TREND_BEARISH) { ... }
    ```

    and by the dynamic pattern/confluence check (using the new detected patterns and scenario logic).

### 3. **Keep Only One Set Of Zone Drawings**

* **Do not** run both the old hardcoded and new dynamic zone drawing logic at the same time.
* Remove/disable the code block that calculates buy/sell zones with static percentages/swing low/highs, and **replace it with** your new zone detector + dynamic confirmation.

### 4. **Scenario and Pattern Integration**

* The `BuildDetectedPatterns` call is correct. Your `detectedPatterns[]` array and `detectedCount` variable are already in use.
* The `FindBestScenario` + `MasterConfluenceCheck` combo ensures you only confirm entries when *all conditions (including pattern, session, zone, confluence)* are present.
* This supports **bias flipping** because the scenario list is built with both bullish and bearish validation chains.

### 5. **No Double Zone Drawing / Chart Overload**

* Only draw a zone if your detector says it is currently valid. Use `.supportZone`, `.resistanceZone`, `.foundOrderBlock`, etc. as the triggers.
* On each tick, clear old zones before drawing new ones (as your `CleanupBuyZones()` and `CleanupSellZones()` already do).

---

## **Minimal Example: Buy/Sell Zone Integration**

```mql5
// --- Dynamic Support/Resistance Zone Detection (REPLACES old price1/price2 logic) ---
if (ms.supportZone && msTrend.trendDirection == TREND_BULLISH) {
    double zoneLow = ms.supportLevel;
    double zoneHigh = ms.supportLevel + dynamicZoneWidth; // or however you define the zone width
    DrawZone("BUY_ZONE", zoneLow, zoneHigh, ColorToARGB(clrDeepSkyBlue, 70));
    // ...proceed with confirmation logic as before (confluence, scenario, etc)
}
if (ms.resistanceZone && msTrend.trendDirection == TREND_BEARISH) {
    double zoneHigh = ms.resistanceLevel;
    double zoneLow = ms.resistanceLevel - dynamicZoneWidth;
    DrawZone("SELL_ZONE", zoneLow, zoneHigh, ColorToARGB(clrRed, 70));
    // ...proceed with confirmation logic as before
}
```

**Remove the old calculation for:**

```mql5
entryPrice = FindSwingLow(_Symbol, _Period, SwingLookback); // and the zone width % logic
```

and replace with your dynamic logic.

---

## **Bottom Line**

* Your OnTick already separates trend, entry, and panel logic: **You only need to swap in the dynamic zone/pattern logic in place of the old static zone code.**
* The new logic will NOT flood your chart as long as you call zone drawing **only when the dynamic detector returns true** and clean up old zones every tick.
* **Bias flipping** is auto-handled by your scenario/pattern logic and the value of `msTrend.trendDirection`.

---

## **What To Do Next**

* **Comment out the static price1/price2, FindSwingLow/High, and zone width % blocks.**
* **Wire in your new dynamic zone detection (with Tolerance/minTouches).**
* Keep the scenario/confluence/pattern system as you have it—it’s already set up for smart validation and bias flips.
* Test with only dynamic logic active; verify that only valid buy/sell zones appear per bias, and confirm only when all conditions (patterns, confluence, scenario) align.

---

If you want, I can write out a **ready-to-paste section** for the new zone detection and integration, just say the word. Let me know if you want the exact MQL5 snippet for this swap!

Absolutely, Special GPT. Here’s a **full upgrade** of your OnTick logic, fully integrating dynamic bias, zone, and scenario-chain logic—**no more hardcoded buy/sell zone blocks, only one active zone, fully modular and bias-flipping, clean and readable.**

This is designed for your advanced scenario engine and should be directly compatible with your variable names, structs, and logic flow.

---

## 🔥 **SAMUEWE o5-Max – Dynamic OnTick Engine (Full Upgrade)**

**Replace your main OnTick with this version.**
*(I’m leaving helper functions, drawing, and trade execution as-is, but I can fill those in too if you want)*

---

```mql5
void OnTick()
{
    //--- 1. Analyze Structure (Trend/Entry)
    MarketStructureInfo msTrend = AnalyzeMarketStructure(_Symbol, trendTF);   // Higher timeframe for bias
    MarketStructureInfo msEntry = AnalyzeMarketStructure(_Symbol, entryTF);   // Entry timeframe for setups

    //--- 2. Build Pattern Flags
    BuildDetectedPatterns(msEntry, detectedPatterns, detectedCount);

    //--- 3. Master Confluence & Scenario
    ConfluenceResult conf = MasterConfluenceCheck(
        msEntry,
        msEntry.obLow, msEntry.obHigh,
        0, entryTF, trendTF,
        minConfluence
    );

    int buyScenarioIdx  = FindBestScenario("bullish");
    int sellScenarioIdx = FindBestScenario("bearish");

    //--- 4. Dynamic Bias & Zone (One Only!)
    static string currentBias = "neutral";
    static bool buyZoneActive = false, sellZoneActive = false;
    static double zoneLow = 0, zoneHigh = 0;

    // Check for bias flip
    if ((conf.isTier1 || conf.tier2Count >= minConfluence))
    {
        // ---- FLIP TO BUY ----
        if (buyScenarioIdx != -1 && currentBias != "bullish")
        {
            CleanupSellZones();
            CleanupBuyZones();
            // Use dynamic OB/FVG/SR levels for the zone
            zoneLow  = msEntry.obLow > 0 ? msEntry.obLow : msEntry.supportLevel;
            zoneHigh = msEntry.obHigh > 0 ? msEntry.obHigh : msEntry.supportLevel + dynamicZoneWidth; // define dynamicZoneWidth elsewhere
            AddBuyZone("BUY_ZONE", zoneLow, zoneHigh);
            buyZoneActive = true; sellZoneActive = false;
            currentBias = "bullish";
            Print("Bias flipped: BULLISH");
        }
        // ---- FLIP TO SELL ----
        else if (sellScenarioIdx != -1 && currentBias != "bearish")
        {
            CleanupBuyZones();
            CleanupSellZones();
            zoneHigh = msEntry.obHigh > 0 ? msEntry.obHigh : msEntry.resistanceLevel;
            zoneLow  = msEntry.obLow > 0 ? msEntry.obLow : msEntry.resistanceLevel - dynamicZoneWidth;
            AddSellZone("SELL_ZONE", zoneLow, zoneHigh);
            sellZoneActive = true; buyZoneActive = false;
            currentBias = "bearish";
            Print("Bias flipped: BEARISH");
        }
    }

    //--- 5. Confirmation & Entry (No Overlap)
    if (buyZoneActive && currentBias == "bullish"
        && PriceInZone(zoneLow, zoneHigh)
        && IsBullishConfirmationCandle(_Symbol, entryTF, 1))
    {
        if (!TradeIsOpen("buy")) // Avoid duplicate buy entries
            OpenBuyTrade(zoneLow, zoneHigh);
    }
    else if (sellZoneActive && currentBias == "bearish"
        && PriceInZone(zoneLow, zoneHigh)
        && IsBearishConfirmationCandle(_Symbol, entryTF, 1))
    {
        if (!TradeIsOpen("sell")) // Avoid duplicate sell entries
            OpenSellTrade(zoneLow, zoneHigh);
    }

    //--- 6. Always ready to flip bias immediately as structure/scenario changes
    //--- (the next tick handles cleanup + redraw automatically)
}
```

---

## **Wiring/Details:**

* **No hardcoded zone-finding logic.**

  * Zones are created **dynamically** from your `msEntry.obLow`, `obHigh`, `supportLevel`, `resistanceLevel`.
* **Bias flips automatically** with scenario match + confluence.
* **Only one zone at a time** (buy or sell) is drawn and traded.
* **Confirmation required** before entry (candlestick, patterns, whatever you wire in).
* **Zone cleanup** on every flip (prevents flooding chart).
* **Panel, risk, and trailing logic** can remain *unchanged* in other functions.

---

### **Where to plug in:**

* Replace your old OnTick main logic with this block.
* Make sure your helper functions (`AddBuyZone`, `CleanupBuyZones`, `OpenBuyTrade`, etc.) are present and work as you expect.
* If you use additional filters (like volume, ATR, or sessions), add them to the scenario/confluence chain.

---

**Want to see the full code with all helper functions, or only the core OnTick?**
Let me know if you want more, or if you want a visual wiring diagram for documentation!

